<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spWhite</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Player

//Enumerations
enum PLAYER_STATE                               //Each state is assigned the index of the corresponding script.
{                                               //This means that to execute the correct state we can use
    normal      = PlayerState_Normal,           //script_execute(state) rather than a switch statement.
    ledge_grab  = PlayerState_LedgeGrab,
    swim        = PlayerState_Swim,
    climb       = PlayerState_Climb,
    wall_jump   = PlayerState_WallJump
}
enum PLAYER_ACTION                              //This is used simply as a way of telling what the player is
{                                               //doing to avoid having to put animation, sound or effects
    stand,                                      //code into the state scripts. This keeps everything tidy.
    run,                                        //It would also allow some more flexability if you need to
    jump,                                       //know what player is doing.
    fall,
    ledge_grab,
    float,
    swim,
    hold,
    climb,
    traverse,
    wall_slide,
    wall_jump
}

//Objects
object_solid        = obSolid;                  //These are all of the environment objects that the player can
object_fluid        = obFluid;                  //interact with.
object_ladder       = obLadder;                 //object_solid is the only required object. The others should
object_wall         = obWall;                   //be assigned the keyword 'noone' if you do not require them.

//Inputs
input_left          = false;                    //These are the character controls, assigned in the step event
input_right         = false;                    //code and later referenced in the player state scripts.
input_up            = false;                    //To change the control keys you should look at the step event.
input_down          = false;
input_jump          = false;

//Player State Variables
state               = PLAYER_STATE.normal;      //These variables are used to keep track of the player's
action              = PLAYER_ACTION.stand;      //basic control statistics.
facing              = 1;                        //The facing variable determines whether the player is facing
grounded            = false;                    //left or right (-1 or 1). The grounded variable determines
xspeed              = 0;                        //whether the player is on the ground or not (true or false).
yspeed              = 0;

can_ledge_grab      = true;                     //All of these boolean values allow you to switch off specific
can_swim            = true;                     //states. This allows you to easily implement unlockable
can_climb           = true;                     //skills.
can_wall_slide      = true;
can_wall_jump       = true;

//Horizontal Movement
run_speed           = 5;
swim_speed          = 1;
traverse_speed      = 1;    //When moving sideways on a ladder object.
wall_jump_speed     = 2;    //The horizontal speed when jumping off a wall.

//Vertical Movement
grav                = 0.5;
jump_height         = 225;
jump_number         = 1;    //How many times the player can jump (eg 2 = double jump).
jump_current        = 0;    //This is a counter and should be left at 0.
density             = 0.7;  //The density variable affects how deep the player floats in a fluid object.
float_damping       = 0.08; //Effectively water friction. Higher value will simulate thicker fluid.
climb_speed         = 1;
wall_slide_speed    = 2;
wall_jump_height    = 48;

hang_height         = 36;   //How many pixels below the ledge the player will hang.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process Player

if(global.dead = false){
visible = true;
}else{
visible = false;
}


//Get User Input
input_left  = keyboard_check_direct(ord('A'));                   //This is where you can change your character
input_right = keyboard_check_direct(ord('D'));                  //controls for your game.
input_up    = keyboard_check_direct(ord('W'));
input_down  = keyboard_check_direct(ord('S'));
input_jump  = mouse_check_button(mb_left);

if(place_meeting(x, y + 1, object_solid))
{
    grounded = true;
}
else
{
    grounded = false;
}

script_execute(state);

if(xspeed != 0)                                                 //If the xspeed variable is not 0 it means
{                                                               //either the left or right key has been pressed
    facing = sign(xspeed);                                      //and so we can change the facing direction.
}

//Horizontal Collision and Movement
if(place_meeting(x + xspeed, y, object_solid))                  //This collision code was originally written by
{                                                               //Shaun Spalding.
    while(!place_meeting(x + sign(xspeed), y, object_solid))    //He explains how it works in his youtube
    {                                                           //tutorial:
        x += sign(xspeed);                                      //https://www.youtube.com/watch?v=IysShLIaosk
    }
    xspeed = 0;
}
x += xspeed;

//Vertical Collision and Movement
if(place_meeting(x, y + yspeed, object_solid))
{
    while(!place_meeting(x, y + sign(yspeed), object_solid))
    {
        y += sign(yspeed);
    }
    yspeed = 0;
}
y += yspeed;

//Sprite and Animation
switch(action)                                                  //The switch statement checks the value of
{                                                               //'action' and then will perform the 
    case PLAYER_ACTION.stand:                                   //corresponding case.
        //sprite_index    = spPlayer_Stand;
        image_speed     = 5 / room_speed;
        break;
    
    case PLAYER_ACTION.run:
        //sprite_index    = spPlayer_Run;
        image_speed     = 10 / room_speed;
        break;
    
    case PLAYER_ACTION.jump:
        //sprite_index    = spPlayer_Jump;
        image_speed     = 5 / room_speed;
        break;
    
    case PLAYER_ACTION.fall:
        //sprite_index    = spPlayer_Fall;
        image_speed     = 5 / room_speed;
        break;
    
    case PLAYER_ACTION.ledge_grab:
        //sprite_index    = spPlayer_LedgeGrab;
        image_speed     = 5 / room_speed;
        break;
    
    case PLAYER_ACTION.float:
        //sprite_index    = spPlayer_Float;
        image_speed     = 5 / room_speed;
        break;
    
    case PLAYER_ACTION.swim:
        //sprite_index    = spPlayer_Swim;
        image_speed     = 7 / room_speed;
        break;
    
    case PLAYER_ACTION.hold:
        //sprite_index    = spPlayer_Hold;
        image_speed     = 5 / room_speed;
        break;
    
    case PLAYER_ACTION.climb:
        //sprite_index    = spPlayer_Climb;
        if(yspeed &lt; 0)
        {
            image_speed = 6 / room_speed;
        }
        else
        {
            image_speed = -6 / room_speed;
        }
        break;
    
    case PLAYER_ACTION.traverse:
        //sprite_index    = spPlayer_Traverse;
        image_speed     = 6 / room_speed;
        break;
    
    case PLAYER_ACTION.wall_slide:
        ///sprite_index    = spPlayer_WallSlide;
        image_speed     = 5 / room_speed;
        break;
    
    case PLAYER_ACTION.wall_jump:
        //sprite_index    = spPlayer_Jump;
        image_speed     = 5 / room_speed;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obBlockHit">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.points +=1

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obSweater">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index    = spHonSkin;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obBrickSkin">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index    = spBrickSkin;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obDiamond">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index    = spMiner;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obKnightSkin">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index    = spKnight;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obBlocker">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.dead = true

if(!instance_exists(obDeathSound)){
instance_create(x,y,obDeathSound);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Player
draw_self();
//draw_sprite_ext(sprite_index, image_index, round(x), round(y), facing, image_yscale, image_angle, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
